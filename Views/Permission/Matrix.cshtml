@model MatMob.Models.ViewModels.PermissionMatrixViewModel
@{
    ViewData["Title"] = "Matriz de Permissões";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="page-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="h2 mb-0">
                        <i class="fas fa-th-large me-2"></i>
                        Matriz de Permissões
                    </h1>
                    <div>
                        <a asp-action="RoleManagement" class="btn btn-primary">
                            <i class="fas fa-users-cog"></i> Gerenciar Perfis
                        </a>
                        <a asp-action="Statistics" class="btn btn-info">
                            <i class="fas fa-chart-bar"></i> Estatísticas
                        </a>
                    </div>
                </div>
            </div>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <!-- Controles -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="groupByCategory" checked>
                                <label class="form-check-label" for="groupByCategory">
                                    Agrupar por categoria
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6 text-end">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-outline-success" id="expandAll">
                                    <i class="fas fa-expand-alt"></i> Expandir Tudo
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-warning" id="collapseAll">
                                    <i class="fas fa-compress-alt"></i> Recolher Tudo
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @if (Model.Roles.Any() && Model.Permissions.Any())
            {
                <!-- Matriz de Permissões Agrupada por Categoria -->
                <div id="categorizedMatrix">
                    @foreach (var categoryGroup in Model.PermissionsByCategory)
                    {
                        <div class="card mb-3 category-card">
                            <div class="card-header category-header" data-bs-toggle="collapse" 
                                 data-bs-target="#category-@(categoryGroup.Key.Replace(" ", ""))" 
                                 style="cursor: pointer;">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">
                                        <i class="fas fa-folder me-2"></i>
                                        @categoryGroup.Key
                                        <span class="badge bg-secondary ms-2">@categoryGroup.Value.Count permissões</span>
                                    </h5>
                                    <i class="fas fa-chevron-down collapse-icon"></i>
                                </div>
                            </div>
                            <div class="collapse show" id="category-@(categoryGroup.Key.Replace(" ", ""))">
                                <div class="card-body p-0">
                                    <div class="table-responsive">
                                        <table class="table table-sm table-hover mb-0 permission-matrix-table">
                                            <thead class="table-light">
                                                <tr>
                                                    <th style="min-width: 300px;">Permissão</th>
                                                    @foreach (var role in Model.Roles)
                                                    {
                                                        <th class="text-center role-header" style="min-width: 120px;">
                                                            <div class="role-info">
                                                                <strong>@role.Name</strong>
                                                                @if (!string.IsNullOrEmpty(role.Description))
                                                                {
                                                                    <br><small class="text-muted">@role.Description</small>
                                                                }
                                                                @if (!role.IsActive)
                                                                {
                                                                    <br><span class="badge bg-warning">Inativo</span>
                                                                }
                                                            </div>
                                                        </th>
                                                    }
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var permission in categoryGroup.Value.OrderBy(p => p.Name))
                                                {
                                                    <tr>
                                                        <td>
                                                            <div class="permission-info">
                                                                <strong>@permission.Name</strong>
                                                                @if (!string.IsNullOrEmpty(permission.Description))
                                                                {
                                                                    <br><small class="text-muted">@permission.Description</small>
                                                                }
                                                                <br><code class="small">@permission.Code</code>
                                                            </div>
                                                        </td>
                                                        @foreach (var role in Model.Roles)
                                                        {
                                                            var hasPermission = Model.RolePermissions.ContainsKey(role.Id) && 
                                                                              Model.RolePermissions[role.Id].Any(p => p.Id == permission.Id);
                                                            <td class="text-center align-middle">
                                                                <div class="form-check form-switch d-flex justify-content-center">
                                                                    <input class="form-check-input permission-toggle" 
                                                                           type="checkbox" 
                                                                           data-role-id="@role.Id" 
                                                                           data-permission-id="@permission.Id"
                                                                           @(hasPermission ? "checked" : "")
                                                                           @(!role.IsActive ? "disabled" : "") />
                                                                </div>
                                                            </td>
                                                        }
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Matriz de Permissões Completa (oculta inicialmente) -->
                <div id="fullMatrix" style="display: none;">
                    <div class="card">
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-sm table-hover mb-0 permission-matrix-table">
                                    <thead class="table-light sticky-top">
                                        <tr>
                                            <th style="min-width: 300px;">Permissão</th>
                                            @foreach (var role in Model.Roles)
                                            {
                                                <th class="text-center role-header" style="min-width: 120px;">
                                                    <div class="role-info">
                                                        <strong>@role.Name</strong>
                                                        @if (!string.IsNullOrEmpty(role.Description))
                                                        {
                                                            <br><small class="text-muted">@role.Description</small>
                                                        }
                                                        @if (!role.IsActive)
                                                        {
                                                            <br><span class="badge bg-warning">Inativo</span>
                                                        }
                                                    </div>
                                                </th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var permission in Model.Permissions.OrderBy(p => p.Category).ThenBy(p => p.Name))
                                        {
                                            <tr>
                                                <td>
                                                    <div class="permission-info">
                                                        <span class="badge bg-light text-dark me-2">@permission.Category</span>
                                                        <strong>@permission.Name</strong>
                                                        @if (!string.IsNullOrEmpty(permission.Description))
                                                        {
                                                            <br><small class="text-muted">@permission.Description</small>
                                                        }
                                                        <br><code class="small">@permission.Code</code>
                                                    </div>
                                                </td>
                                                @foreach (var role in Model.Roles)
                                                {
                                                    var hasPermission = Model.RolePermissions.ContainsKey(role.Id) && 
                                                                      Model.RolePermissions[role.Id].Any(p => p.Id == permission.Id);
                                                    <td class="text-center align-middle">
                                                        <div class="form-check form-switch d-flex justify-content-center">
                                                            <input class="form-check-input permission-toggle" 
                                                                   type="checkbox" 
                                                                   data-role-id="@role.Id" 
                                                                   data-permission-id="@permission.Id"
                                                                   @(hasPermission ? "checked" : "")
                                                                   @(!role.IsActive ? "disabled" : "") />
                                                        </div>
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Resumo -->
                <div class="row mt-4">
                    <div class="col-md-3">
                        <div class="card bg-primary text-white">
                            <div class="card-body text-center">
                                <i class="fas fa-key fa-2x mb-2"></i>
                                <h4>@Model.Permissions.Count</h4>
                                <p class="mb-0">Permissões</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-success text-white">
                            <div class="card-body text-center">
                                <i class="fas fa-users-cog fa-2x mb-2"></i>
                                <h4>@Model.Roles.Count</h4>
                                <p class="mb-0">Perfis</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-info text-white">
                            <div class="card-body text-center">
                                <i class="fas fa-folder fa-2x mb-2"></i>
                                <h4>@Model.PermissionsByCategory.Count</h4>
                                <p class="mb-0">Categorias</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-warning text-white">
                            <div class="card-body text-center">
                                <i class="fas fa-check-circle fa-2x mb-2"></i>
                                <h4>@Model.RolePermissions.Values.SelectMany(x => x).Count()</h4>
                                <p class="mb-0">Atribuições</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-exclamation-triangle fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">Dados Insuficientes</h5>
                        <p class="text-muted mb-4">
                            Para visualizar a matriz de permissões, você precisa ter pelo menos um perfil e uma permissão cadastrados.
                        </p>
                        <div>
                            <a asp-action="CreateRole" class="btn btn-primary me-2">
                                <i class="fas fa-plus"></i> Criar Perfil
                            </a>
                            <a asp-action="Index" class="btn btn-outline-secondary">
                                <i class="fas fa-list"></i> Ver Permissões
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Toggle between categorized and full matrix
            $('#groupByCategory').change(function() {
                if ($(this).is(':checked')) {
                    $('#categorizedMatrix').show();
                    $('#fullMatrix').hide();
                } else {
                    $('#categorizedMatrix').hide();
                    $('#fullMatrix').show();
                }
            });

            // Expand/Collapse all categories
            $('#expandAll').click(function() {
                $('.collapse').collapse('show');
                $('.collapse-icon').removeClass('fa-chevron-right').addClass('fa-chevron-down');
            });

            $('#collapseAll').click(function() {
                $('.collapse').collapse('hide');
                $('.collapse-icon').removeClass('fa-chevron-down').addClass('fa-chevron-right');
            });

            // Handle collapse icon rotation
            $('.category-header').click(function() {
                setTimeout(() => {
                    const icon = $(this).find('.collapse-icon');
                    const target = $($(this).data('bs-target'));
                    
                    if (target.hasClass('show')) {
                        icon.removeClass('fa-chevron-right').addClass('fa-chevron-down');
                    } else {
                        icon.removeClass('fa-chevron-down').addClass('fa-chevron-right');
                    }
                }, 100);
            });

            // Handle permission toggle
            $('.permission-toggle').change(function() {
                const roleId = $(this).data('role-id');
                const permissionId = $(this).data('permission-id');
                const toggle = $(this);
                
                // Disable the toggle during the request
                toggle.prop('disabled', true);
                
                $.ajax({
                    url: '@Url.Action("ToggleRolePermission", "Permission")',
                    type: 'POST',
                    data: {
                        roleId: roleId,
                        permissionId: permissionId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            // Update all instances of this permission toggle
                            $(`.permission-toggle[data-role-id="${roleId}"][data-permission-id="${permissionId}"]`)
                                .prop('checked', response.hasPermission);
                            
                            // Show success feedback
                            showToast('Permissão atualizada com sucesso!', 'success');
                        } else {
                            // Revert the toggle
                            toggle.prop('checked', !toggle.prop('checked'));
                            showToast('Erro ao atualizar permissão: ' + response.message, 'error');
                        }
                    },
                    error: function() {
                        // Revert the toggle
                        toggle.prop('checked', !toggle.prop('checked'));
                        showToast('Erro ao comunicar com o servidor.', 'error');
                    },
                    complete: function() {
                        toggle.prop('disabled', false);
                    }
                });
            });

            // Add CSRF token to AJAX requests
            $.ajaxSetup({
                beforeSend: function(xhr, settings) {
                    if (settings.type !== 'GET') {
                        xhr.setRequestHeader("RequestVerificationToken", 
                            $('input[name="__RequestVerificationToken"]').val());
                    }
                }
            });
        });

        function showToast(message, type) {
            const toastClass = type === 'success' ? 'bg-success' : 'bg-danger';
            const toast = $(`
                <div class="toast align-items-center text-white ${toastClass} border-0" role="alert">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `);
            
            // Add toast container if it doesn't exist
            if ($('#toast-container').length === 0) {
                $('body').append('<div id="toast-container" class="toast-container position-fixed top-0 end-0 p-3"></div>');
            }
            
            $('#toast-container').append(toast);
            toast.toast('show');
            
            // Remove toast after it's hidden
            toast.on('hidden.bs.toast', function() {
                $(this).remove();
            });
        }
    </script>
}

@{
    Html.AntiForgeryToken();
}

<style>
.page-header {
    border-bottom: 1px solid #dee2e6;
    padding-bottom: 1rem;
    margin-bottom: 1.5rem;
}

.category-header:hover {
    background-color: #f8f9fa !important;
}

.collapse-icon {
    transition: transform 0.2s ease;
}

.permission-matrix-table th {
    font-weight: 600;
    color: #495057;
    vertical-align: middle;
}

.permission-info strong {
    color: #495057;
    font-weight: 600;
}

.role-header {
    background-color: #f8f9fa;
    border-left: 1px solid #dee2e6;
}

.form-check-input:checked {
    background-color: #198754;
    border-color: #198754;
}

.form-check-input:disabled {
    opacity: 0.5;
}

.card {
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    border: 1px solid rgba(0, 0, 0, 0.125);
}

.category-card {
    border-left: 4px solid #0d6efd;
}

.sticky-top {
    top: 0;
    z-index: 1020;
}

.toast-container {
    z-index: 1055;
}

code {
    color: #e83e8c;
    background-color: #f8f9fa;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
}
</style>